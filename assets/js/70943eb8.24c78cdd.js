"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6545],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8996:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=["components"],o={title:"Mails"},s=void 0,p={unversionedId:"optional-components/mails",id:"version-9.x/optional-components/mails",isDocsHomePage:!1,title:"Mails",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/mails.md",sourceDirName:"optional-components",slug:"/optional-components/mails",permalink:"/docs/9.x/optional-components/mails",editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/mails.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618096631,formattedLastUpdatedAt:"4/10/2021",frontMatter:{title:"Mails"},sidebar:"version-9.x/docs",previous:{title:"Events",permalink:"/docs/9.x/optional-components/events"},next:{title:"Notifications",permalink:"/docs/9.x/optional-components/notifications"}},u=[{value:"Definition",id:"definition",children:[]},{value:"Principles",id:"principles",children:[]},{value:"Rules",id:"rules",children:[]},{value:"Folder Structure",id:"folder-structure",children:[]},{value:"Code Samples",id:"code-samples",children:[]},{value:"Email Templates",id:"email-templates",children:[]},{value:"Configure Emails",id:"configure-emails",children:[]},{value:"Queueing A Notification",id:"queueing",children:[]}],m={toc:u};function c(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#definition"},"Definition")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#principles"},"Principles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rules"},"Rules")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#email-templates"},"Email Templates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configure-emails"},"Configure Emails")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#queueing"},"Queueing"))),(0,r.kt)("h3",{id:"definition"},"Definition"),(0,r.kt)("p",null,"The Mail component allows you to describe an email and send it whenever needed. "),(0,r.kt)("p",null,"For more details refer to this ",(0,r.kt)("a",{parentName:"p",href:"https://laravel.com/docs/mail"},"link"),"."),(0,r.kt)("h3",{id:"principles"},"Principles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Containers MAY or MAY NOT have one or more Mail.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Ship may contain general Mails."))),(0,r.kt)("h3",{id:"rules"},"Rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All Notifications MUST extend from ",(0,r.kt)("inlineCode",{parentName:"li"},"App\\Ship\\Parents\\Mails\\Mail"),"."),(0,r.kt)("li",{parentName:"ul"},"Email Templates must be placed inside the Mail directory in a Templates directory ",(0,r.kt)("inlineCode",{parentName:"li"},"app/Containers/{container}/Mails/Templates"),".")),(0,r.kt)("h3",{id:"folder-structure"},"Folder Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," - app\n    - Containers\n        - {container-name}\n            - Mails\n                - UserRegisteredMail.php\n                - ...\n                - Templates\n                    - user-registered.blade.php\n                    - ...\n    - Ship\n        - Mails\n            - SomeMail.php\n            - ...\n            - Templates\n                - some-template.blade.php\n                - ...\n")),(0,r.kt)("h3",{id:"code-samples"},"Code Samples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: a simple Mail")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\User\\Mails;\n\nuse App\\Containers\\User\\Models\\User;\nuse Illuminate\\Bus\\Queueable;\nuse App\\Ship\\Parents\\Mails\\Mail;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage from an Action:")),(0,r.kt)("p",null,"Notifications can be sent from Actions or Tasks using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mail")," Facade."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Mail::send(new UserRegisteredMail($user));\n")),(0,r.kt)("h2",{id:"email-templates"},"Email Templates"),(0,r.kt)("p",null,"Templates should be placed inside a folder ",(0,r.kt)("inlineCode",{parentName:"p"},"Templates")," inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mail")," folder."),(0,r.kt)("p",null,"To access a Mail template ",(0,r.kt)("em",{parentName:"p"},"(same like accessing a web view)")," you must call the container name then the view name.   "),(0,r.kt)("p",null,"In the example below we're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"user-registered.blade.php")," template in the ",(0,r.kt)("strong",{parentName:"p"},"User")," Container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$this->view('user::user-registered')\n")),(0,r.kt)("h2",{id:"configure-emails"},"Configure Emails"),(0,r.kt)("p",null,"Open the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and set the From mail and address, this will be used globally whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," function is not called in the Mail. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},'MAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME="apiato"\n')),(0,r.kt)("p",null,"To use different email address in some classes add ",(0,r.kt)("inlineCode",{parentName:"p"},"->to($this->email, $this->name)")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," function in your Mail class. "),(0,r.kt)("p",null,"By default Apiato is configured to use Log Driver ",(0,r.kt)("inlineCode",{parentName:"p"},"MAIL_DRIVER=log"),", you can change that from the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,r.kt)("h2",{id:"queueing"},"Queueing A Notification"),(0,r.kt)("p",null,"To queue a notification you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"Illuminate\\Bus\\Queueable")," and implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Illuminate\\Contracts\\Queue\\ShouldQueue"),"."))}c.isMDXComponent=!0}}]);